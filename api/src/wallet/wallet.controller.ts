// src/wallet/wallet.controller.ts
import {
  Controller,
  Get,
  Post,
  Body,
  Req,
  Res,
  UnauthorizedException,
} from "@nestjs/common";
import { WalletService } from "./wallet.service";
import { FundingService } from "./funding.service";
import {
  fundingRequestSchema,
  type FundingRequestDto,
  FundingRequestDtoDoc,
} from "./dto";
import type { Request, Response } from "express";
import {
  ApiTags,
  ApiBody,
  ApiOkResponse,
  ApiOperation,
  ApiHeader,
  ApiResponse,
} from "@nestjs/swagger";
import { ApiAuthUser } from "../common/swagger/auth.decorators";

@ApiTags("Wallet")
@ApiAuthUser()
@Controller("api")
export class WalletController {
  constructor(
    private wallets: WalletService,
    private funding: FundingService,
  ) {}

  @Get("wallet/balance")
  @ApiOperation({ summary: "CÃ¼zdan Ã¶zeti (balance, equity, margin, freeMargin, marginLevel). ETag destekli." })
  @ApiHeader({
    name: "If-None-Match",
    required: false,
    description: "Ã–nceki ETag deÄŸerini gÃ¶nderirsen 304 Not Modified dÃ¶nebilir.",
  })
  @ApiOkResponse({ description: "GÃ¼ncel cÃ¼zdan Ã¶zeti" })
  @ApiResponse({ status: 304, description: "DeÄŸiÅŸiklik yok (ETag eÅŸleÅŸti)." })
  async balance(@Req() req: Request, @Res({ passthrough: true }) res: Response) {
    const userId = (req as any).user?.userId ?? (req as any).user?.sub;
    if (!userId) throw new UnauthorizedException("Missing user");

    const overview = await this.wallets.getOverview(userId);

    // ETag'e equity/margin deÄŸiÅŸimini de kat â†’ canlÄ± fiyat deÄŸiÅŸtiÄŸinde de farklÄ± olsun
    const etag = `"w:${userId}:${overview.etagSalt}:${overview.updatedAt.getTime()}"`;
    res.setHeader("Cache-Control", "no-store");
    res.setHeader("ETag", etag);

    const inm = req.headers["if-none-match"];
    if (inm && inm === etag) {
      res.status(304).end();
      return;
    }

    return {
      balanceUSD: overview.balanceUSD,
      balanceText: overview.balanceUSD.toFixed(2),
      updatedAt: overview.updatedAt.toISOString(),

      // ðŸ‘‡ MetricsRowâ€™un bekledikleri
      marginUsd: overview.marginUsd,
      freeMarginUsd: overview.freeMarginUsd,
      assetValue: overview.assetValue,   // = equity = balance + unrealizedPnL
      marginLevel: overview.marginLevel, // %
    };
  }

  @Post("wallet/funding")
  @ApiOperation({ summary: "Para yatÄ±r/Ã§ek talebi oluÅŸtur" })
  @ApiBody({ type: FundingRequestDtoDoc })
  @ApiOkResponse({ description: "Funding isteÄŸi oluÅŸturuldu." })
  async createFunding(@Req() req: Request, @Body() body: unknown) {
    const userId = (req as any).user?.userId ?? (req as any).user?.sub;
    if (!userId) throw new UnauthorizedException("Missing user");

    const input: FundingRequestDto = fundingRequestSchema.parse(body);
    const fr = await this.funding.createRequest(
      userId,
      input.type,
      String(input.amount),
      input.reference,
    );
    return { request: fr };
  }

  @Get("wallet/funding")
  @ApiOperation({ summary: "KullanÄ±cÄ±nÄ±n funding taleplerini listele" })
  @ApiOkResponse({ description: "KullanÄ±cÄ±nÄ±n funding talepleri." })
  async myFunding(@Req() req: Request) {
    const userId = (req as any).user?.userId ?? (req as any).user?.sub;
    if (!userId) throw new UnauthorizedException("Missing user");

    const items = await this.funding.listMine(userId);
    return { items };
  }
}
