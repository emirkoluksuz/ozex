services:
  caddy:
    image: caddy:2.8.4
    container_name: caddy
    restart: unless-stopped
    ports: ["80:80","443:443"]
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - ./certs:/etc/certs:ro
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      landing: { condition: service_healthy }
      trader:  { condition: service_healthy }
      manager: { condition: service_healthy }
      api:     { condition: service_healthy }
    security_opt: [ "no-new-privileges:true" ]
    cap_drop: ["ALL"]
    read_only: true
    tmpfs: ["/tmp"]
    ulimits: { nofile: 65536 }
    logging:
      driver: json-file
      options: { max-size: "10m", max-file: "5" }
    networks: [edge, app]

  landing:
    build:
      context: ./landing
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
        NEXT_PUBLIC_WS_URL: ${NEXT_PUBLIC_WS_URL}
    container_name: landing
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: "3000"
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
      NEXT_PUBLIC_WS_URL: ${NEXT_PUBLIC_WS_URL}
      TZ: Europe/Istanbul
    expose: ["3000"]
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://127.0.0.1:3000/ >/dev/null || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 30s
    user: "10001:10001"
    security_opt: [ "no-new-privileges:true" ]
    cap_drop: ["ALL"]
    read_only: true
    tmpfs: ["/tmp", "/home/node/.next"]
    logging:
      driver: json-file
      options: { max-size: "10m", max-file: "5" }
    mem_limit: 512m
    cpus: "0.75"
    networks: [app]

  trader:
    build:
      context: ./trader
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
        NEXT_PUBLIC_WS_URL: ${NEXT_PUBLIC_WS_URL}
    container_name: trader
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: "3001"
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
      NEXT_PUBLIC_WS_URL: ${NEXT_PUBLIC_WS_URL}
      TZ: Europe/Istanbul
    expose: ["3001"]
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://127.0.0.1:3001/ >/dev/null || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 30s
    user: "10001:10001"
    security_opt: [ "no-new-privileges:true" ]
    cap_drop: ["ALL"]
    read_only: true
    tmpfs: ["/tmp"]
    logging:
      driver: json-file
      options: { max-size: "10m", max-file: "5" }
    mem_limit: 512m
    cpus: "0.75"
    networks: [app]

  manager:
    build:
      context: ./manager
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
        NEXT_PUBLIC_WS_URL: ${NEXT_PUBLIC_WS_URL}
    container_name: manager
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: "3002"
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
      NEXT_PUBLIC_WS_URL: ${NEXT_PUBLIC_WS_URL}
      TZ: Europe/Istanbul
    expose: ["3002"]
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://127.0.0.1:3002/ >/dev/null || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 30s
    user: "10001:10001"
    security_opt: [ "no-new-privileges:true" ]
    cap_drop: ["ALL"]
    read_only: true
    tmpfs: ["/tmp"]
    logging:
      driver: json-file
      options: { max-size: "10m", max-file: "5" }
    mem_limit: 512m
    cpus: "0.75"
    networks: [app]

  # Tek-seferlik migrate servisi (DB'yi expose etmeden şema güncelleme)
  migrate:
    build:
      context: ./api
      dockerfile: Dockerfile
      target: builder
    environment:
      - DATABASE_URL=${DATABASE_URL}
    command: sh -lc "npx prisma migrate deploy"
    depends_on:
      db: { condition: service_healthy }
    restart: "no"
    networks: [app]

  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: api
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: "4000"
      TZ: Europe/Istanbul
      DATABASE_URL: ${DATABASE_URL}
      CORS_ORIGINS: ${CORS_ORIGINS}
      JWT_ACCESS_SECRET: ${JWT_ACCESS_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      JWT_ACCESS_TTL: ${JWT_ACCESS_TTL}
      JWT_REFRESH_TTL: ${JWT_REFRESH_TTL}
      ADMIN_API_KEY: ${ADMIN_API_KEY}
      COOKIE_DOMAIN: ${COOKIE_DOMAIN}
      TV_BRIDGE_SHARED_SECRET: ${TV_BRIDGE_SHARED_SECRET}
    expose: ["4000"]
    depends_on:
      db:      { condition: service_healthy }
      migrate: { condition: service_completed_successfully }
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://127.0.0.1:4000/health >/dev/null || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 30s
    user: "10001:10001"
    security_opt: [ "no-new-privileges:true" ]
    cap_drop: ["ALL"]
    read_only: true
    tmpfs: ["/tmp"]
    logging:
      driver: json-file
      options: { max-size: "10m", max-file: "5" }
    mem_limit: 768m
    cpus: "1.0"
    networks: [app]

  tv_bridge:
    build:
      context: ./tv_bridge
      dockerfile: Dockerfile
    container_name: tv_bridge
    restart: unless-stopped
    environment:
      API_URL: http://api:4000/api/internal/tv/prices
      SYMS: BINANCE:BTCUSDT,FOREXCOM:EURUSD,FOREXCOM:XAUUSD,BIST:XU100,BIST:THYAO,NASDAQ:AAPL,FOREXCOM:USDTRY
      TV_BRIDGE_SHARED_SECRET: ${TV_BRIDGE_SHARED_SECRET}
      BRIDGE_ORIGIN: https://trader.fonborsa.com
      POST_INTERVAL_SEC: "0.5"
      TZ: Europe/Istanbul
    depends_on:
      api: { condition: service_healthy }
    healthcheck:
      test: ["CMD-SHELL", "python - <<'PY'\nimport socket,sys; socket.gethostbyname('api'); sys.exit(0)\nPY"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 20s
    user: "10001:10001"
    security_opt: [ "no-new-privileges:true" ]
    cap_drop: ["ALL"]
    read_only: true
    tmpfs: ["/tmp"]
    logging:
      driver: json-file
      options: { max-size: "10m", max-file: "5" }
    mem_limit: 256m
    cpus: "0.50"
    networks: [app]

  db:
    image: postgres:16-alpine
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      TZ: Europe/Istanbul
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h 127.0.0.1 -U \"$${POSTGRES_USER:-postgres}\" -d \"$${POSTGRES_DB:-postgres}\" || pg_isready -h 127.0.0.1 -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 60s
    # DİKKAT: Postgres ilk init'te izin/sahiplik ayarlamak zorunda.
    # Bu nedenle security_opt/cap_drop UYGULAMADIK.
    logging:
      driver: json-file
      options: { max-size: "10m", max-file: "5" }
    mem_limit: 1g
    cpus: "1.0"
    networks: [app]

networks:
  edge: {}
  app: {}

volumes:
  caddy_data:
  caddy_config:
  pg_data:
